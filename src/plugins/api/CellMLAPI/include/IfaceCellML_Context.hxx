/* This file is automatically generated from CellML_Context.idl
 * DO NOT EDIT DIRECTLY OR CHANGES WILL BE LOST!
 */
#ifndef _GUARD_IFACE_CellMLContext
#define _GUARD_IFACE_CellMLContext
#include "cda_compiler_support.h"
#ifdef MODULE_CONTAINS_CellMLContext
#define PUBLIC_CellMLContext_PRE CDA_EXPORT_PRE
#define PUBLIC_CellMLContext_POST CDA_EXPORT_POST
#else
#define PUBLIC_CellMLContext_PRE CDA_IMPORT_PRE
#define PUBLIC_CellMLContext_POST CDA_IMPORT_POST
#endif
#include "Ifacexpcom.hxx"
#include "IfaceDOM_APISPEC.hxx"
#include "IfaceMathML_content_APISPEC.hxx"
#include "IfaceCellML_APISPEC.hxx"
namespace iface
{
  namespace cellml_context
  {
    PUBLIC_CellMLContext_PRE 
    class  PUBLIC_CellMLContext_POST CellMLModule
     : public virtual iface::XPCOM::IObject
    {
    public:
      static const char* INTERFACE_NAME() { return "cellml_context::CellMLModule"; }
      virtual ~CellMLModule() {}
      typedef enum _enum_ModuleTypes
      {
        TOOL = 0,
        SERVICE = 1
      } ModuleTypes;
      virtual iface::cellml_context::CellMLModule::ModuleTypes moduleType() throw(std::exception&)  = 0;
      virtual std::wstring moduleName() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual std::wstring moduleDescription() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual std::wstring moduleVersion() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual std::wstring moduleIconURL() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void unload() throw(std::exception&) = 0;
    };
    PUBLIC_CellMLContext_PRE 
    class  PUBLIC_CellMLContext_POST CellMLModuleIterator
     : public virtual iface::XPCOM::IObject
    {
    public:
      static const char* INTERFACE_NAME() { return "cellml_context::CellMLModuleIterator"; }
      virtual ~CellMLModuleIterator() {}
      virtual already_AddRefd<iface::cellml_context::CellMLModule>  nextModule() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    class ModelNode;
    PUBLIC_CellMLContext_PRE 
    class  PUBLIC_CellMLContext_POST ModelNodeIterator
     : public virtual iface::XPCOM::IObject
    {
    public:
      static const char* INTERFACE_NAME() { return "cellml_context::ModelNodeIterator"; }
      virtual ~ModelNodeIterator() {}
      virtual already_AddRefd<iface::cellml_context::ModelNode>  nextModelNode() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CellMLContext_PRE 
    class  PUBLIC_CellMLContext_POST CellMLModuleMonitor
     : public virtual iface::XPCOM::IObject
    {
    public:
      static const char* INTERFACE_NAME() { return "cellml_context::CellMLModuleMonitor"; }
      virtual ~CellMLModuleMonitor() {}
      virtual void moduleRegistered(iface::cellml_context::CellMLModule* mod) throw(std::exception&) = 0;
      virtual void moduleDeregistered(iface::cellml_context::CellMLModule* mod) throw(std::exception&) = 0;
    };
    PUBLIC_CellMLContext_PRE 
    class  PUBLIC_CellMLContext_POST CellMLModuleManager
     : public virtual iface::XPCOM::IObject
    {
    public:
      static const char* INTERFACE_NAME() { return "cellml_context::CellMLModuleManager"; }
      virtual ~CellMLModuleManager() {}
      virtual void registerModule(iface::cellml_context::CellMLModule* mod) throw(std::exception&) = 0;
      virtual void deregisterModule(iface::cellml_context::CellMLModule* mod) throw(std::exception&) = 0;
      virtual already_AddRefd<iface::cellml_context::CellMLModule>  findModuleByName(const std::wstring& moduleName, const std::wstring& moduleVersion) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual void requestModuleByName(const std::wstring& moduleName, const std::wstring& moduleVersion) throw(std::exception&) = 0;
      virtual void addMonitor(iface::cellml_context::CellMLModuleMonitor* moduleMonitor) throw(std::exception&) = 0;
      virtual void removeMonitor(iface::cellml_context::CellMLModuleMonitor* moduleMonitor) throw(std::exception&) = 0;
      virtual already_AddRefd<iface::cellml_context::CellMLModuleIterator>  iterateModules() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CellMLContext_PRE 
    class  PUBLIC_CellMLContext_POST CellMLTypeAnnotationManager
     : public virtual iface::XPCOM::IObject
    {
    public:
      static const char* INTERFACE_NAME() { return "cellml_context::CellMLTypeAnnotationManager"; }
      virtual ~CellMLTypeAnnotationManager() {}
      virtual void setUserData(const std::wstring& type, const std::wstring& key, iface::XPCOM::IObject* data) throw(std::exception&) = 0;
      virtual already_AddRefd<iface::XPCOM::IObject>  getUserData(const std::wstring& type, const std::wstring& key) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    class ModelList;
    class ModelNode;
    PUBLIC_CellMLContext_PRE 
    class  PUBLIC_CellMLContext_POST ModelNodeMonitor
     : public virtual iface::XPCOM::IObject
    {
    public:
      static const char* INTERFACE_NAME() { return "cellml_context::ModelNodeMonitor"; }
      virtual ~ModelNodeMonitor() {}
      virtual void modelRenamed(iface::cellml_context::ModelNode* renamedNode, const std::wstring& newName) throw(std::exception&) = 0;
      virtual void modelReplaced(iface::cellml_context::ModelNode* changedNode, iface::cellml_api::Model* newModel) throw(std::exception&) = 0;
      virtual void changesFlushed(iface::cellml_context::ModelNode* changedNode) throw(std::exception&) = 0;
      virtual void ownerChanged(iface::cellml_context::ModelNode* changedNode, iface::XPCOM::IObject* newOwner) throw(std::exception&) = 0;
      virtual void modelFrozenStateChanged(iface::cellml_context::ModelNode* changedNode, bool newState) throw(std::exception&) = 0;
    };
    PUBLIC_CellMLContext_PRE 
    class  PUBLIC_CellMLContext_POST ModelListMonitor
     : public virtual iface::XPCOM::IObject
    {
    public:
      static const char* INTERFACE_NAME() { return "cellml_context::ModelListMonitor"; }
      virtual ~ModelListMonitor() {}
      virtual void modelAdded(iface::cellml_context::ModelNode* newNode, int16_t depth) throw(std::exception&) = 0;
      virtual void modelRemoved(iface::cellml_context::ModelNode* oldNode, int16_t depth) throw(std::exception&) = 0;
    };
    PUBLIC_CellMLContext_PRE 
    class  PUBLIC_CellMLContext_POST ModelNode
     : public virtual iface::XPCOM::IObject
    {
    public:
      static const char* INTERFACE_NAME() { return "cellml_context::ModelNode"; }
      virtual ~ModelNode() {}
      virtual std::wstring name() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void name(const std::wstring& attr) throw(std::exception&) = 0;
      virtual already_AddRefd<iface::cellml_context::ModelNode>  getLatestDerivative() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::cellml_context::ModelNode>  getWritable() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual bool isFrozen() throw(std::exception&)  = 0;
      virtual void isFrozen(bool attr) throw(std::exception&) = 0;
      virtual uint32_t modificationTimestamp() throw(std::exception&)  = 0;
      virtual void stampModifiedNow() throw(std::exception&) = 0;
      virtual already_AddRefd<iface::cellml_api::Model>  model() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void model(iface::cellml_api::Model* attr) throw(std::exception&) = 0;
      virtual void flushChanges() throw(std::exception&) = 0;
      virtual already_AddRefd<iface::XPCOM::IObject>  owner() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void owner(iface::XPCOM::IObject* attr) throw(std::exception&) = 0;
      virtual already_AddRefd<iface::cellml_context::ModelList>  derivedModels() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void addModelMonitor(iface::cellml_context::ModelNodeMonitor* monitor) throw(std::exception&) = 0;
      virtual void removeModelMonitor(iface::cellml_context::ModelNodeMonitor* monitor) throw(std::exception&) = 0;
      virtual already_AddRefd<iface::cellml_context::ModelList>  parentList() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual bool dirty() throw(std::exception&)  = 0;
      virtual void dirty(bool attr) throw(std::exception&) = 0;
    };
    PUBLIC_CellMLContext_PRE 
    class  PUBLIC_CellMLContext_POST ModelList
     : public virtual iface::XPCOM::IObject
    {
    public:
      static const char* INTERFACE_NAME() { return "cellml_context::ModelList"; }
      virtual ~ModelList() {}
      virtual void addModelMonitor(iface::cellml_context::ModelNodeMonitor* monitor) throw(std::exception&) = 0;
      virtual void removeModelMonitor(iface::cellml_context::ModelNodeMonitor* monitor) throw(std::exception&) = 0;
      virtual void addListMonitor(iface::cellml_context::ModelListMonitor* monitor) throw(std::exception&) = 0;
      virtual void removeListMonitor(iface::cellml_context::ModelListMonitor* monitor) throw(std::exception&) = 0;
      virtual already_AddRefd<iface::cellml_context::ModelNode>  makeNode(iface::cellml_api::Model* mod) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual void addModel(iface::cellml_context::ModelNode* node) throw(std::exception&) = 0;
      virtual void removeModel(iface::cellml_context::ModelNode* node) throw(std::exception&) = 0;
      virtual already_AddRefd<iface::cellml_context::ModelNodeIterator>  iterateModelNodes() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::cellml_context::ModelNode>  parentNode() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CellMLContext_PRE 
    class  PUBLIC_CellMLContext_POST CellMLContext
     : public virtual iface::XPCOM::IObject
    {
    public:
      static const char* INTERFACE_NAME() { return "cellml_context::CellMLContext"; }
      virtual ~CellMLContext() {}
      virtual already_AddRefd<iface::cellml_context::CellMLModuleManager>  moduleManager() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::cellml_context::CellMLTypeAnnotationManager>  typeAnnotationManager() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::cellml_api::CellMLBootstrap>  cellmlBootstrap() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::cellml_context::ModelList>  loadedModels() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
    };
  };
};
#undef PUBLIC_CellMLContext_PRE
#undef PUBLIC_CellMLContext_POST
#endif // guard
