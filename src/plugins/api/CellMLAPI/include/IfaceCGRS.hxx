/* This file is automatically generated from CGRS.idl
 * DO NOT EDIT DIRECTLY OR CHANGES WILL BE LOST!
 */
#ifndef _GUARD_IFACE_CGRS
#define _GUARD_IFACE_CGRS
#include "cda_compiler_support.h"
#ifdef MODULE_CONTAINS_CGRS
#define PUBLIC_CGRS_PRE CDA_EXPORT_PRE
#define PUBLIC_CGRS_POST CDA_EXPORT_POST
#else
#define PUBLIC_CGRS_PRE CDA_IMPORT_PRE
#define PUBLIC_CGRS_POST CDA_IMPORT_POST
#endif
#include "Ifacexpcom.hxx"
namespace iface
{
  namespace CGRS
  {
    class GenericAttribute;
    class GenericMethod;
    class GenericValue;
    class GenericInterface;
    class StringValue;
    class WStringValue;
    class ShortValue;
    class LongValue;
    class LongLongValue;
    class UShortValue;
    class ULongValue;
    class ULongLongValue;
    class FloatValue;
    class DoubleValue;
    class BooleanValue;
    class CharValue;
    class OctetValue;
    class SequenceValue;
    class SequenceType;
    class EnumValue;
    class EnumType;
    class ObjectValue;
    typedef std::vector<iface::CGRS::GenericValue*>& ValueSequence;
    PUBLIC_CGRS_PRE 
    class  PUBLIC_CGRS_POST CGRSError : public std::exception
    {
    public:
      CGRSError(){}
    };
    class GenericType;
    PUBLIC_CGRS_PRE 
    class  PUBLIC_CGRS_POST GenericsService
     : public virtual iface::XPCOM::IObject
    {
    public:
      static const char* INTERFACE_NAME() { return "CGRS::GenericsService"; }
      virtual ~GenericsService() {}
      virtual void loadGenericModule(const std::string& aModulePath) throw(std::exception&) = 0;
      virtual already_AddRefd<iface::CGRS::GenericValue>  getBootstrapByName(const std::string& aBootstrapName) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::CGRS::GenericInterface>  getInterfaceByName(const std::string& aInterfaceName) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::CGRS::StringValue>  makeString(const std::string& val) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::CGRS::WStringValue>  makeWString(const std::wstring& val) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::CGRS::ShortValue>  makeShort(int16_t val) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::CGRS::LongValue>  makeLong(int32_t val) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::CGRS::LongLongValue>  makeLongLong(int64_t val) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::CGRS::UShortValue>  makeUShort(uint16_t val) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::CGRS::ULongValue>  makeULong(uint32_t val) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::CGRS::ULongLongValue>  makeULongLong(uint64_t val) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::CGRS::FloatValue>  makeFloat(float val) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::CGRS::DoubleValue>  makeDouble(double val) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::CGRS::BooleanValue>  makeBoolean(bool val) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::CGRS::CharValue>  makeChar(char val) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::CGRS::OctetValue>  makeOctet(uint8_t val) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::CGRS::SequenceValue>  makeSequence(iface::CGRS::GenericType* innerType) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::CGRS::EnumValue>  makeEnumFromString(iface::CGRS::EnumType* etype, const std::string& name) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::CGRS::EnumValue>  makeEnumFromIndex(iface::CGRS::EnumType* etype, int32_t index) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::CGRS::GenericValue>  makeObject(iface::XPCOM::IObject* value) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::CGRS::GenericValue>  makeVoid() throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CGRS_PRE 
    class  PUBLIC_CGRS_POST GenericInterface
     : public virtual iface::XPCOM::IObject
    {
    public:
      static const char* INTERFACE_NAME() { return "CGRS::GenericInterface"; }
      virtual ~GenericInterface() {}
      virtual int32_t baseCount() throw(std::exception&)  = 0;
      virtual already_AddRefd<iface::CGRS::GenericInterface>  getBase(int32_t aBaseNumber) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual int32_t attributeCount() throw(std::exception&)  = 0;
      virtual already_AddRefd<iface::CGRS::GenericAttribute>  getAttributeByIndex(int32_t aAttributeNumber) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::CGRS::GenericAttribute>  getAttributeByName(const std::string& aAttributeName) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual int32_t operationCount() throw(std::exception&)  = 0;
      virtual already_AddRefd<iface::CGRS::GenericMethod>  getOperationByIndex(int32_t aOperationNumber) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::CGRS::GenericMethod>  getOperationByName(const std::string& aOperationName) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CGRS_PRE 
    class  PUBLIC_CGRS_POST GenericType
     : public virtual iface::XPCOM::IObject
    {
    public:
      static const char* INTERFACE_NAME() { return "CGRS::GenericType"; }
      virtual ~GenericType() {}
      virtual std::string asString() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CGRS_PRE 
    class  PUBLIC_CGRS_POST SequenceType
     : public virtual iface::CGRS::GenericType
    {
    public:
      static const char* INTERFACE_NAME() { return "CGRS::SequenceType"; }
      virtual ~SequenceType() {}
      virtual already_AddRefd<iface::CGRS::GenericType>  innerType() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CGRS_PRE 
    class  PUBLIC_CGRS_POST EnumType
     : public virtual iface::CGRS::GenericType
    {
    public:
      static const char* INTERFACE_NAME() { return "CGRS::EnumType"; }
      virtual ~EnumType() {}
      virtual int32_t maxIndex() throw(std::exception&)  = 0;
      virtual std::string indexToName(int32_t index) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual int32_t nameToIndex(const std::string& name) throw(std::exception&) = 0;
    };
    PUBLIC_CGRS_PRE 
    class  PUBLIC_CGRS_POST GenericValue
     : public virtual iface::XPCOM::IObject
    {
    public:
      static const char* INTERFACE_NAME() { return "CGRS::GenericValue"; }
      virtual ~GenericValue() {}
      virtual already_AddRefd<iface::CGRS::GenericType>  typeOfValue() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CGRS_PRE 
    class  PUBLIC_CGRS_POST StringValue
     : public virtual iface::CGRS::GenericValue
    {
    public:
      static const char* INTERFACE_NAME() { return "CGRS::StringValue"; }
      virtual ~StringValue() {}
      virtual std::string asString() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void asString(const std::string& attr) throw(std::exception&) = 0;
    };
    PUBLIC_CGRS_PRE 
    class  PUBLIC_CGRS_POST WStringValue
     : public virtual iface::CGRS::GenericValue
    {
    public:
      static const char* INTERFACE_NAME() { return "CGRS::WStringValue"; }
      virtual ~WStringValue() {}
      virtual std::wstring asWString() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void asWString(const std::wstring& attr) throw(std::exception&) = 0;
    };
    PUBLIC_CGRS_PRE 
    class  PUBLIC_CGRS_POST ShortValue
     : public virtual iface::CGRS::GenericValue
    {
    public:
      static const char* INTERFACE_NAME() { return "CGRS::ShortValue"; }
      virtual ~ShortValue() {}
      virtual int16_t asShort() throw(std::exception&)  = 0;
      virtual void asShort(int16_t attr) throw(std::exception&) = 0;
    };
    PUBLIC_CGRS_PRE 
    class  PUBLIC_CGRS_POST LongValue
     : public virtual iface::CGRS::GenericValue
    {
    public:
      static const char* INTERFACE_NAME() { return "CGRS::LongValue"; }
      virtual ~LongValue() {}
      virtual int32_t asLong() throw(std::exception&)  = 0;
      virtual void asLong(int32_t attr) throw(std::exception&) = 0;
    };
    PUBLIC_CGRS_PRE 
    class  PUBLIC_CGRS_POST LongLongValue
     : public virtual iface::CGRS::GenericValue
    {
    public:
      static const char* INTERFACE_NAME() { return "CGRS::LongLongValue"; }
      virtual ~LongLongValue() {}
      virtual int64_t asLongLong() throw(std::exception&)  = 0;
      virtual void asLongLong(int64_t attr) throw(std::exception&) = 0;
    };
    PUBLIC_CGRS_PRE 
    class  PUBLIC_CGRS_POST UShortValue
     : public virtual iface::CGRS::GenericValue
    {
    public:
      static const char* INTERFACE_NAME() { return "CGRS::UShortValue"; }
      virtual ~UShortValue() {}
      virtual uint16_t asUShort() throw(std::exception&)  = 0;
      virtual void asUShort(uint16_t attr) throw(std::exception&) = 0;
    };
    PUBLIC_CGRS_PRE 
    class  PUBLIC_CGRS_POST ULongValue
     : public virtual iface::CGRS::GenericValue
    {
    public:
      static const char* INTERFACE_NAME() { return "CGRS::ULongValue"; }
      virtual ~ULongValue() {}
      virtual uint32_t asULong() throw(std::exception&)  = 0;
      virtual void asULong(uint32_t attr) throw(std::exception&) = 0;
    };
    PUBLIC_CGRS_PRE 
    class  PUBLIC_CGRS_POST ULongLongValue
     : public virtual iface::CGRS::GenericValue
    {
    public:
      static const char* INTERFACE_NAME() { return "CGRS::ULongLongValue"; }
      virtual ~ULongLongValue() {}
      virtual uint64_t asULongLong() throw(std::exception&)  = 0;
      virtual void asULongLong(uint64_t attr) throw(std::exception&) = 0;
    };
    PUBLIC_CGRS_PRE 
    class  PUBLIC_CGRS_POST FloatValue
     : public virtual iface::CGRS::GenericValue
    {
    public:
      static const char* INTERFACE_NAME() { return "CGRS::FloatValue"; }
      virtual ~FloatValue() {}
      virtual float asFloat() throw(std::exception&)  = 0;
      virtual void asFloat(float attr) throw(std::exception&) = 0;
    };
    PUBLIC_CGRS_PRE 
    class  PUBLIC_CGRS_POST DoubleValue
     : public virtual iface::CGRS::GenericValue
    {
    public:
      static const char* INTERFACE_NAME() { return "CGRS::DoubleValue"; }
      virtual ~DoubleValue() {}
      virtual double asDouble() throw(std::exception&)  = 0;
      virtual void asDouble(double attr) throw(std::exception&) = 0;
    };
    PUBLIC_CGRS_PRE 
    class  PUBLIC_CGRS_POST BooleanValue
     : public virtual iface::CGRS::GenericValue
    {
    public:
      static const char* INTERFACE_NAME() { return "CGRS::BooleanValue"; }
      virtual ~BooleanValue() {}
      virtual bool asBoolean() throw(std::exception&)  = 0;
      virtual void asBoolean(bool attr) throw(std::exception&) = 0;
    };
    PUBLIC_CGRS_PRE 
    class  PUBLIC_CGRS_POST CharValue
     : public virtual iface::CGRS::GenericValue
    {
    public:
      static const char* INTERFACE_NAME() { return "CGRS::CharValue"; }
      virtual ~CharValue() {}
      virtual char asChar() throw(std::exception&)  = 0;
      virtual void asChar(char attr) throw(std::exception&) = 0;
    };
    PUBLIC_CGRS_PRE 
    class  PUBLIC_CGRS_POST OctetValue
     : public virtual iface::CGRS::GenericValue
    {
    public:
      static const char* INTERFACE_NAME() { return "CGRS::OctetValue"; }
      virtual ~OctetValue() {}
      virtual uint8_t asOctet() throw(std::exception&)  = 0;
      virtual void asOctet(uint8_t attr) throw(std::exception&) = 0;
    };
    PUBLIC_CGRS_PRE 
    class  PUBLIC_CGRS_POST ObjectValue
     : public virtual iface::CGRS::GenericValue
    {
    public:
      static const char* INTERFACE_NAME() { return "CGRS::ObjectValue"; }
      virtual ~ObjectValue() {}
      virtual already_AddRefd<iface::XPCOM::IObject>  asObject() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void asObject(iface::XPCOM::IObject* attr) throw(std::exception&) = 0;
    };
    PUBLIC_CGRS_PRE 
    class  PUBLIC_CGRS_POST CallbackObjectValue
     : public virtual iface::CGRS::GenericValue
    {
    public:
      static const char* INTERFACE_NAME() { return "CGRS::CallbackObjectValue"; }
      virtual ~CallbackObjectValue() {}
      virtual already_AddRefd<iface::CGRS::GenericValue>  invokeOnInterface(const std::string& interfaceName, const std::string& methodName, const std::vector<iface::CGRS::GenericValue*>& inValues, std::vector<iface::CGRS::GenericValue*>& outValues, bool* wasException) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CGRS_PRE 
    class  PUBLIC_CGRS_POST SequenceValue
     : public virtual iface::CGRS::GenericValue
    {
    public:
      static const char* INTERFACE_NAME() { return "CGRS::SequenceValue"; }
      virtual ~SequenceValue() {}
      virtual int32_t valueCount() throw(std::exception&)  = 0;
      virtual already_AddRefd<iface::CGRS::GenericValue>  getValueByIndex(int32_t index) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
      virtual void appendValue(iface::CGRS::GenericValue* v) throw(std::exception&) = 0;
    };
    PUBLIC_CGRS_PRE 
    class  PUBLIC_CGRS_POST EnumValue
     : public virtual iface::CGRS::GenericValue
    {
    public:
      static const char* INTERFACE_NAME() { return "CGRS::EnumValue"; }
      virtual ~EnumValue() {}
      virtual std::string asString() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual void asString(const std::string& attr) throw(std::exception&) = 0;
      virtual int32_t asLong() throw(std::exception&)  = 0;
      virtual void asLong(int32_t attr) throw(std::exception&) = 0;
    };
    PUBLIC_CGRS_PRE 
    class  PUBLIC_CGRS_POST GenericAttribute
     : public virtual iface::XPCOM::IObject
    {
    public:
      static const char* INTERFACE_NAME() { return "CGRS::GenericAttribute"; }
      virtual ~GenericAttribute() {}
      virtual bool isReadonly() throw(std::exception&)  = 0;
      virtual std::string name() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::CGRS::GenericType>  type() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::CGRS::GenericMethod>  getter() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::CGRS::GenericMethod>  setter() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
    };
    PUBLIC_CGRS_PRE 
    class  PUBLIC_CGRS_POST GenericParameter
     : public virtual iface::XPCOM::IObject
    {
    public:
      static const char* INTERFACE_NAME() { return "CGRS::GenericParameter"; }
      virtual ~GenericParameter() {}
      virtual bool isIn() throw(std::exception&)  = 0;
      virtual bool isOut() throw(std::exception&)  = 0;
      virtual std::string name() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::CGRS::GenericType>  type() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
    };
    typedef std::vector<iface::CGRS::GenericParameter*>& ParameterSequence;
    PUBLIC_CGRS_PRE 
    class  PUBLIC_CGRS_POST GenericMethod
     : public virtual iface::XPCOM::IObject
    {
    public:
      static const char* INTERFACE_NAME() { return "CGRS::GenericMethod"; }
      virtual ~GenericMethod() {}
      virtual std::vector<iface::CGRS::GenericParameter*> parameters() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::CGRS::GenericType>  returnType() throw(std::exception&)  WARN_IF_RETURN_UNUSED = 0;
      virtual already_AddRefd<iface::CGRS::GenericValue>  invoke(iface::CGRS::ObjectValue* invokeOn, const std::vector<iface::CGRS::GenericValue*>& inValues, std::vector<iface::CGRS::GenericValue*>& outValues, bool* wasException) throw(std::exception&) WARN_IF_RETURN_UNUSED = 0;
    };
  };
};
#undef PUBLIC_CGRS_PRE
#undef PUBLIC_CGRS_POST
#endif // guard
